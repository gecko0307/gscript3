/*
Copyright (c) 2025 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module gscript.lexer;

import std.ascii;
import std.conv;
import std.algorithm;

import dlib.text.lexer: DlibLexer = Lexer;
import dlib.text.utf8;

bool isWhitespace(string lexeme)
{
    return isWhite(lexeme[0]);
}

bool isNumber(string lexeme)
{
    foreach(v; lexeme)
        if (!isDigit(v))
            return false;
    return true;
}

enum GsTokenType
{
    Undefined,
    Identifier,
    Number,
    String,
    Boolean,
    Operator,
    OpeningBracket,
    OpeningSquareBracket,
    OpeningCurlyBracket,
    ClosingBracket,
    ClosingSquareBracket,
    ClosingCurlyBracket,
    Separator,
    Semicolon,
    Keyword,
    EOF
}

string tokenTypeToString(GsTokenType t)
{
    switch(t)
    {
        case GsTokenType.Undefined: return "?";
        case GsTokenType.Identifier: return "identifier";
        case GsTokenType.Number: return "number";
        case GsTokenType.String: return "string";
        case GsTokenType.Boolean: return "boolean";
        case GsTokenType.Operator: return "operator";
        case GsTokenType.OpeningBracket: return "opening bracket";
        case GsTokenType.OpeningSquareBracket: return "opening square bracket";
        case GsTokenType.OpeningCurlyBracket: return "opening curly bracket";
        case GsTokenType.ClosingBracket: return "closing bracket";
        case GsTokenType.ClosingSquareBracket: return "closing square bracket";
        case GsTokenType.ClosingCurlyBracket: return "closing curly bracket";
        case GsTokenType.Separator: return "separator";
        case GsTokenType.Semicolon: return "semicolon";
        case GsTokenType.Keyword: return "keyword";
        case GsTokenType.EOF: return "end of file";
        default: return "?";
    }
}

struct GsToken
{
    GsTokenType type;
    string value;
}

class GsLexer
{
    DlibLexer lexer;
    string text;
    string currentLexeme = "";
    alias current = currentLexeme;
    
    string internalString;
    UTF8Encoder encoder;
    
    string[] delimiters = [
        "(", ")", "{", "}", "[", "]", 
        ".", ",", ":", ";",
        "+", "-", "*", "/",
        "=", ">", "<",
        "==", ">=", "<=", "!=",
        "+=", "-=", "*=", "/=",
        ">>", "<<", "<<=", ">>=",
        "&", "&&", "|", "||", "^", "!", "~",
        "&=", "|=", "^=", "~=",
        "^^", "?",
        "%", "%=",
        "\n", " ", 
        "\"", "\'", "`",
        "\\a", "\\b", "\\f", "\\n", "\\r", "\\t", "\\v", "\\\"", "\\\'", "\\\\", "\\?", "\\u",
        "//", "/*", "*/",
        "@"
    ];
    
    string[] keywords = [
        "let", "const", "new", "func",
        "return",
        "if", "else", "while",
        "import", "as",
        "print"
    ];
    
    string[] operators = [
        "+", "-", "*", "/",
        "=", ">", "<",
        "==", ">=", "<=", "!=",
        "+=", "-=", "*=", "/=",
        ">>", "<<", "<<=", ">>=",
        "&", "&&", "|", "||", "^", "!", "~",
        "&=", "|=", "^=", "~=",
        "^^", "?",
        "%", "%=",
        "@",
        "not", "and", "or", "mod"
    ];
    
    string quotes = "\"\'`";
    
    string[] separators = [
        ".", ",", ":"
    ];
    
    this(string text)
    {
        this.text = text;
        internalString.reserve(text.length);
        lexer = new DlibLexer(this.text, delimiters);
    }
    
    GsToken nextToken()
    {
        getLexeme();
        
        auto lexeme = current;
        
        if (lexeme.length == 0)
        {
            return GsToken(GsTokenType.EOF, "");
        }
        if (isDigit(lexeme[0]))
        {
            return GsToken(GsTokenType.Number, lexeme);
        }
        else if (quotes.canFind(lexeme[0]))
        {
            return GsToken(GsTokenType.String, lexeme);
        }
        else if (operators.canFind(lexeme))
        {
            return GsToken(GsTokenType.Operator, lexeme);
        }
        else if (lexeme == ";")
        {
            return GsToken(GsTokenType.Semicolon, lexeme);
        }
        else if (lexeme == "(")
        {
            return GsToken(GsTokenType.OpeningBracket, lexeme);
        }
        else if (lexeme == ")")
        {
            return GsToken(GsTokenType.ClosingBracket, lexeme);
        }
        else if (lexeme == "[")
        {
            return GsToken(GsTokenType.OpeningSquareBracket, lexeme);
        }
        else if (lexeme == "]")
        {
            return GsToken(GsTokenType.ClosingSquareBracket, lexeme);
        }
        else if (lexeme == "{")
        {
            return GsToken(GsTokenType.OpeningCurlyBracket, lexeme);
        }
        else if (lexeme == "}")
        {
            return GsToken(GsTokenType.ClosingCurlyBracket, lexeme);
        }
        else if (separators.canFind(lexeme))
        {
            return GsToken(GsTokenType.Separator, lexeme);
        }
        else if (lexeme == "true" || lexeme == "false")
        {
            return GsToken(GsTokenType.Boolean, lexeme);
        }
        else if (isAlpha(lexeme[0]) || lexeme[0] == '_')
        {
            if (keywords.canFind(lexeme))
                return GsToken(GsTokenType.Keyword, lexeme);
            else
                return GsToken(GsTokenType.Identifier, lexeme);
        }
        else
        {
            return GsToken(GsTokenType.Undefined, lexeme);
        }
    }
    
    bool isSingleLineComment = false;
    bool isMultiLineComment = false;
    
    string reservedLexeme;
    bool _readNext = true;
    
    ulong line = 1;
    
    private void getLexeme()
    {
        string lexeme;
        while (true)
        {
            if (_readNext)
            {
                lexeme = lexer.getLexeme();
            }
            else
            {
                lexeme = reservedLexeme;
                _readNext = true;
            }
                
            if (lexeme.length == 0)
            {
                internalString ~= lexeme;
                currentLexeme = internalString[$-lexeme.length..$];
                return;
            }
            else if (lexeme == "\n")
            {
                isSingleLineComment = false;
                line++;
            }
            else if (lexeme == "*/")
            {
                isMultiLineComment = false;
            }
            else if (!isWhitespace(lexeme) && !isSingleLineComment && !isMultiLineComment)
            {
                if (lexeme == "//")
                {
                    isSingleLineComment = true;
                }
                else if (lexeme == "/*")
                {
                    isMultiLineComment = true;
                }
                else if (lexeme == "\"" || lexeme == "\'" || lexeme == "`")
                {
                    string quote = lexeme;
                    size_t startPos = internalString.length;
                    internalString ~= lexeme;
                    size_t endPos = startPos;
                    while (lexeme.length)
                    {
                        lexeme = lexer.getLexeme();
                        
                        if (lexeme == "\\a") internalString ~= "\a";
                        else if (lexeme == "\\b") internalString ~= "\b";
                        else if (lexeme == "\\f") internalString ~= "\f";
                        else if (lexeme == "\\n") internalString ~= "\n";
                        else if (lexeme == "\\r") internalString ~= "\r";
                        else if (lexeme == "\\t") internalString ~= "\t";
                        else if (lexeme == "\\v") internalString ~= "\v";
                        else if (lexeme == "\\\"") internalString ~= "\"";
                        else if (lexeme == "\\\'") internalString ~= "\'";
                        else if (lexeme == "\\\\") internalString ~= "\\";
                        else if (lexeme == "\\?") internalString ~= "\?";
                        else if (lexeme == "\\u")
                        {
                            lexeme = lexer.getLexeme();
                            char[4] buffer;
                            auto num = hexToUTF8(lexeme, buffer);
                            internalString ~= cast(string)(buffer[0..num]);
                        }
                        else internalString ~= lexeme;

                        endPos = internalString.length;
                        if (lexeme == quote)
                            break;
                    }
                    currentLexeme = internalString[startPos..endPos];
                    return;
                }
                else
                {
                    if (lexeme.startsWith!(a => isDigit(a)))
                    {
                        size_t startPos = internalString.length;
                        internalString ~= lexeme;
                        bool nextSignIsExponentSign = false;
                        
                        if (lexeme.endsWith("e")) 
                            nextSignIsExponentSign = true;
                        
                        while(lexeme.length)
                        {
                            lexeme = lexer.getLexeme();
                            
                            if (lexeme == ".") 
                            {
                                internalString ~= lexeme;
                            }
                            else if (lexeme.endsWith("e")) 
                            {
                                // TODO: ensure e is allowed here
                                internalString ~= lexeme;
                                nextSignIsExponentSign = true;
                            }
                            else if (lexeme.endsWith("f")) 
                            {
                                // TODO: ensure f is allowed here
                                internalString ~= lexeme;
                            }
                            else if (lexeme.startsWith!(a => isDigit(a)))
                            {
                                internalString ~= lexeme;
                            }
                            else if (lexeme == "+" || lexeme == "-")
                            {
                                if (nextSignIsExponentSign)
                                {
                                    // TODO: ensure sign is allowed here
                                    internalString ~= lexeme;
                                    nextSignIsExponentSign = false;
                                }
                                else
                                {
                                    reservedLexeme = lexeme;
                                    break;
                                }
                            }
                            else
                            {
                                reservedLexeme = lexeme;
                                break;
                            }
                        }
                        
                        currentLexeme = internalString[startPos..$];
                        _readNext = false;
                        return;
                    }
                    else
                    {
                        internalString ~= lexeme;
                        currentLexeme = internalString[$-lexeme.length..$];
                        return;
                    }
                }
            }
        }
    }
    
    size_t hexToUTF8(string input, ref char[4] buffer)
    {
        uint codepoint = '\u0000';
        
        // TODO: invalid codepoint should be an error
        if (input.length >= 4)
        {
            string hex = input[0..4];
            codepoint = std.conv.parse!(uint, string)(hex, 16);
        }
        
        return encoder.encode(codepoint, buffer);
    }
}
