/*
Copyright (c) 2025 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module gscript.parser;

import std.stdio;
import std.array;
import std.algorithm;
import std.conv;

import gscript.lexer;

enum NodeType
{
    NullLiteral,
    ErrorLiteral,
    NumberLiteral,
    StringLiteral,
    BooleanLiteral,
    ArrayLiteral,
    ObjectLiteral,
    FunctionLiteral,
    Function,
    Identifier,
    UnaryExpression,
    BinaryExpression,
    AssignExpression,
    LetStatement,
    ConstStatement,
    ExpressionStatement,
    ReturnStatement,
    YieldStatement,
    PrintStatement,
    IfStatement,
    WhileStatement,
    DoWhileStatement,
    ForStatement,
    BreakStatement,
    ContinueStatement,
    MacroDefineStatement,
    Block,
    FunctionCallExpression,
    IndexAccessExpression,
    IndexCallExpression,
    MemberPropertyAccessExpression,
    MemberCallExpression,
    KeyValueExpression,
    NewExpression,
    ArrayExpression,
    ArgumentExpression,
    ArgumentsArrayExpression,
    SpawnExpression,
    AwaitExpression,
    SyncExpression,
    ParametersExpression,
    SharedExpression,
    EscapeExpression,
    TypeExpression
}

immutable string[] assignOperators = [
    "=", "+=", "-=", "*=", "/=",
    "&=", "|=", "^=", "~="
];

immutable string[] logicalOperators = [
    "&&", "||", "and", "or"
];

immutable string[] bitwiseOperators = [
    "&", "|", "^", "xor"
];

immutable string[] compareOperators = [
    ">", "<", "==", ">=", "<=", "!="
];

immutable string[] typeCheckOperators = [
    ":"
];

immutable string[] mulDivModOperators = [
    "*", "/", "%", "mod", "^^"
];

bool isAssignment(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           assignOperators.canFind(token.value);
}

bool isLogical(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           logicalOperators.canFind(token.value);
}

bool isBitwise(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           bitwiseOperators.canFind(token.value);
}

string toLogical(string op)
{
    if (op == "and") return "&&";
    if (op == "or") return "||";
    if (op == "not") return "!";
    else return op;
}

string toBitwise(string op)
{
    if (op == "xor") return "^";
    else return op;
}

bool isCompare(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           compareOperators.canFind(token.value);
}

bool isTypeCheck(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           typeCheckOperators.canFind(token.value);
}

bool isAddSub(GsToken token)
{
    return token.type == GsTokenType.Operator && 
          (token.value == "+" || token.value == "-");
}

bool isMulDivMod(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           mulDivModOperators.canFind(token.value);
}

struct GsVariable
{
    int index;
    bool isConst;
    bool isInitialized;
    int depth;
}

class Scope
{
    Scope parent;
    Scope[] children;
    int nextLocalIndex = 0;
    GsVariable[string] variables;
    int nextArgumentIndex = 0;
    GsVariable[string] arguments;
    string breakLabel;
    string continueLabel;
    int nestingDepth;
    
    this(Scope parentScope = null)
    {
        parent = parentScope;
        if (parent)
        {
            parent.addChildScope(this);
            nestingDepth = parent.nestingDepth + 1;
        }
        else
        {
            nestingDepth = 0;
        }
    }
    
    void addChildScope(Scope s)
    {
        children ~= s;
    }
    
    int defineArgument(string name)
    {
        if (!(name in arguments) && !(name in variables))
        {
            int index = nextArgumentIndex;
            arguments[name] = GsVariable(index, false, false);
            nextArgumentIndex++;
            return index;
        }
        else
        {
            throw new Exception("Redefinition of argument \"" ~ name ~ "\"");
        }
    }
    
    protected int defineVariable(int depth, string name, bool isConst = false)
    {
        if (parent is null)
        {
            if (!(name in variables) && !(name in arguments))
            {
                int index = nextLocalIndex;
                variables[name] = GsVariable(index, isConst, false, depth);
                nextLocalIndex++;
                return index;
            }
            else
            {
                throw new Exception("Redefinition of variable \"" ~ name ~ "\"");
            }
        }
        else
        {
            return parent.defineVariable(depth, name, isConst);
        }
    }
    
    int defineVariable(string name, bool isConst = false)
    {
        return defineVariable(nestingDepth, name, isConst);
    }
    
    bool isArgumentVisible(string name)
    {
        if (name in arguments)
            return true;
        else if (parent)
            return parent.isArgumentVisible(name);
        else
            return false;
    }
    
    bool isVariableVisible(string name, int accessDepth)
    {
        if (name in variables)
        {
            auto v = variables[name];
            return v.depth <= accessDepth;
        }
        else if (parent)
            return parent.isVariableVisible(name, accessDepth);
        else
            return false;
    }
    
    bool isVariableVisible(string name)
    {
        return isVariableVisible(name, nestingDepth);
    }
    
    GsVariable* getVariable(string name)
    {
        GsVariable* v = name in variables;
        if (v)
            return v;
        else if (parent)
            return parent.getVariable(name);
        else
            return null;
    }
    
    int argumentIndex(string name)
    {
        if (name in arguments)
            return arguments[name].index;
        else if (parent)
            return parent.argumentIndex(name);
        else
            return -1;
    }
    
    int variableIndex(string name)
    {
        if (name in variables)
            return variables[name].index;
        else if (parent)
            return parent.variableIndex(name);
        else
            return -1;
    }
    
    string getBreakLabel()
    {
        if (breakLabel.length)
            return breakLabel;
        else if (parent)
            return parent.getBreakLabel();
        else
            return "";
    }
    
    string getContinueLabel()
    {
        if (continueLabel.length)
            return continueLabel;
        else if (parent)
            return parent.getContinueLabel();
        else
            return "";
    }
}

class ASTNode
{
    NodeType type;
    string value;
    ASTNode[] children;
    Scope programScope;
    bool isConst = false;
    bool sharedAccess = false;

    this(NodeType type, string value, ASTNode[] children = [])
    {
        this.type = type;
        this.value = value;
        this.children = children;
    }
    
    bool isLiteral()
    {
        return
            type == NodeType.NumberLiteral || 
            type == NodeType.StringLiteral ||
            type == NodeType.BooleanLiteral;
    }
    
    void print(string indent = "")
    {
        writeln(indent, type, " ", value);
        foreach(ASTNode child; children)
        {
            child.print(indent ~ "  ");
        }
    }
    
    string getBreakLabel()
    {
        if (programScope)
            return programScope.getBreakLabel();
        else
            return "";
    }
    
    string getContinueLabel()
    {
        if (programScope)
            return programScope.getContinueLabel();
        else
            return "";
    }
}

class ASTBlock: ASTNode
{
    this()
    {
        super(NodeType.Block, "");
    }
    
    override void print(string indent = "")
    {
        writeln(indent, type, " ", programScope.nestingDepth);
        foreach(ASTNode child; children)
        {
            child.print(indent ~ "  ");
        }
    }
}

class ASTFunction: ASTNode
{
    string name;
    string[] arguments;
    bool isVariadic = false;
    ASTBlock bodyBlock;
    
    this(string name, string[] arguments, ASTBlock bodyBlock)
    {
        super(NodeType.Function, "");
        this.name = name;
        this.arguments = arguments;
        this.bodyBlock = bodyBlock;
    }
    
    override void print(string indent = "")
    {
        writeln(indent, type, " ", name);
        foreach(ASTNode child; bodyBlock.children)
        {
            child.print(indent ~ "  ");
        }
    }
}

class ASTFunctionLiteral: ASTNode
{
    string label;
    string[] arguments;
    bool isVariadic = false;
    ASTBlock bodyBlock;
    
    this(string[] arguments, ASTBlock bodyBlock)
    {
        super(NodeType.FunctionLiteral, "");
        this.arguments = arguments;
        this.bodyBlock = bodyBlock;
    }
    
    override void print(string indent = "")
    {
        writeln(indent, type);
        foreach(ASTNode child; bodyBlock.children)
        {
            child.print(indent ~ "  ");
        }
    }
}

class GsModule
{
  protected:
    GsProgram program;
    string _filename;
    ASTNode[] statements;
    
  public:
    string[] imports;
    bool ready = false;
    ASTNode[string] macros;
    
    this(GsProgram program, string name)
    {
        this.program = program;
        this._filename = name;
    }
    
    string filename()
    {
        return _filename;
    }
    
    void addStatement(ASTNode stat)
    {
        statements ~= stat;
        stat.programScope = program.peekScope();
    }
    
    void addStatementFront(ASTNode stat)
    {
        statements = stat ~ statements;
        stat.programScope = program.peekScope();
    }
    
    ASTNode[] ast()
    {
        return statements;
    }
}

class GsProgram
{
  protected:
    Scope _rootScope;
    Scope[] scopeStack;
    size_t scopeStackPointer = 0;
    
  public:
    GsModule[string] importedModules;
    GsModule mainModule;
    GsModule[] modulesInImportOrder;
    
    this(string mainModuleFilename)
    {
        scopeStack = new Scope[1024];
        _rootScope = pushScope();
        mainModule = new GsModule(this, mainModuleFilename);
        modulesInImportOrder ~= mainModule;
    }
    
    GsModule importModule(string filename)
    {
        if (!(filename in importedModules))
        {
            auto m = new GsModule(this, filename);
            importedModules[filename] = m;
            modulesInImportOrder = [m] ~ modulesInImportOrder;
            return m;
        }
        else return importedModules[filename];
    }
    
    bool isModuleImported(string filename)
    {
        if (filename in importedModules)
            return true;
        else
            return false;
    }
    
    Scope pushScope(bool inherit = false)
    {
        Scope parent = null;
        if (inherit && scopeStackPointer > 0)
            parent = peekScope();
        scopeStack[scopeStackPointer] = new Scope(parent);
        Scope result = scopeStack[scopeStackPointer];
        scopeStackPointer++;
        return result;
    }
    
    void popScope()
    {
        if (scopeStackPointer > 0)
            scopeStackPointer--;
    }
    
    Scope peekScope()
    {
        return scopeStack[scopeStackPointer - 1];
    }
    
    Scope rootScope()
    {
        return _rootScope;
    }
    
    bool isRootScope()
    {
        return scopeStackPointer == 1;
    }
}

class GsParser
{
  protected:
    GsLexer lexer;
    string filename;
    GsToken currentToken;
    GsProgram program;
    GsModule modul;
    bool isImport = false;
    bool running = false;

   public:
    this(GsLexer lexer, string filename, bool isImport = false)
    {
        this.lexer = lexer;
        this.filename = filename;
        this.currentToken = lexer.nextToken();
        this.isImport = isImport;
        running = true;
    }
    
    void stop(string msg)
    {
        if (running)
        {
            running = false;
            writeln(filename, "(", lexer.line.to!string, "): ", msg);
        }
    }
    
    void eat(string expectedTokenValue)
    {
        if (currentToken.value == expectedTokenValue)
            currentToken = lexer.nextToken();
        else
        {
            if (currentToken.type == GsTokenType.EOF)
                stop("Unexpected end of file, " ~ expectedTokenValue ~ " expected");
            else
                stop("Unexpected token \"" ~ currentToken.value ~ "\", " ~ expectedTokenValue ~ " expected");
        }
    }

    void eat(GsTokenType expectedType)
    {
        if (currentToken.type == expectedType)
            currentToken = lexer.nextToken();
        else
        {
            if (currentToken.type == GsTokenType.EOF)
                stop("Unexpected end of file, " ~ tokenTypeToString(expectedType) ~ " expected");
            else
                stop("Unexpected token \"" ~ currentToken.value ~ "\", " ~ tokenTypeToString(expectedType) ~ " expected");
        }
    }
    
   /*
    * Base entry for expression parsing
    */
    ASTNode parseExpression()
    {
        return parseAssignExpression();
    }
    
   /*
    * a = b, etc.
    */
    ASTNode parseAssignExpression()
    {
        ASTNode left = parseCatExpression();

        while (isAssignment(currentToken))
        {
            string op = currentToken.value;
            eat(GsTokenType.Operator);
            ASTNode right = parseAssignExpression();
            
            if (op == "=")
            {
                left = new ASTNode(NodeType.AssignExpression, "=", [left, right]);
                left.programScope = program.peekScope();
            }
            else
            {
                // Expand shorthand assignment
                string simpleOp = op[0 .. $ - 1]; // remove '='
                right = new ASTNode(NodeType.BinaryExpression, simpleOp, [left, right]);
                right.programScope = program.peekScope();
                left = new ASTNode(NodeType.AssignExpression, "=", [left, right]);
                left.programScope = program.peekScope();
            }
        }

        return left;
    }
    
   /*
    * a ~ b
    */
    ASTNode parseCatExpression()
    {
        ASTNode left = parseLogicalExpression();

        if (currentToken.value == "~")
        {
            string op = currentToken.value;
            eat(GsTokenType.Operator);
            ASTNode right = parseCatExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }
    
   /*
    * a && b, a || b
    */
    ASTNode parseLogicalExpression()
    {
        ASTNode left = parseBitwiseExpression();
        
        while(isLogical(currentToken))
        {
            string op = toLogical(currentToken.value);
            eat(GsTokenType.Operator);
            ASTNode right = parseLogicalExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }
    
   /*
    * a & b, a | b, a ^ b
    */
    ASTNode parseBitwiseExpression()
    {
        ASTNode left = parseCompareExpression();
        
        while(isBitwise(currentToken))
        {
            string op = toBitwise(currentToken.value);
            eat(GsTokenType.Operator);
            ASTNode right = parseBitwiseExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }
    
   /*
    * a > 0, etc.
    */
    ASTNode parseCompareExpression()
    {
        ASTNode left = parseTypeCheckExpression();
        
        while(isCompare(currentToken))
        {
            string op = currentToken.value;
            eat(GsTokenType.Operator);
            ASTNode right = parseCompareExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }
    
    ASTNode parseTypeCheckExpression()
    {
        ASTNode left = parseAddSubExpression();
        
        while(isTypeCheck(currentToken))
        {
            string op = currentToken.value;
            eat(GsTokenType.Operator);
            ASTNode right = parseTypeCheckExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }
        
        return left;
    }
    
   /*
    * a + b, a - b
    */
    ASTNode parseAddSubExpression()
    {
        ASTNode left = parseMulDivModExpression();
        
        while(isAddSub(currentToken))
        {
            string op = currentToken.value;
            eat(GsTokenType.Operator);
            ASTNode right = parseAddSubExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }

   /*
    * a * b, a / b, a % b, a ^^ b
    */
    ASTNode parseMulDivModExpression()
    {
        ASTNode left = parseUnaryOpExpression();
        
        while(isMulDivMod(currentToken))
        {
            string op = currentToken.value;
            if (op == "mod")
                op = "%";
            eat(GsTokenType.Operator);
            ASTNode right = parseMulDivModExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }
    
   /*
    * -a, +a, !a, not a
    */
    ASTNode parseUnaryOpExpression()
    {
        ASTNode left;

        if (currentToken.value == "-")
        {
            eat(GsTokenType.Operator);
            left = new ASTNode(NodeType.UnaryExpression, "-", [parseUnaryOpExpression()]);
            left.programScope = program.peekScope();
        }
        else if (currentToken.value == "+")
        {
            eat(GsTokenType.Operator);
            left = new ASTNode(NodeType.UnaryExpression, "+", [parseUnaryOpExpression()]);
            left.programScope = program.peekScope();
        }
        else if (currentToken.value == "!" || currentToken.value == "not")
        {
            eat(GsTokenType.Operator);
            left = new ASTNode(NodeType.UnaryExpression, "!", [parseUnaryOpExpression()]);
            left.programScope = program.peekScope();
        }
        else
        {
            left = parseTerminalExpression();
        }

        return left;
    }
    
    ASTNode parseTerminalExpression()
    {
        if (currentToken.type == GsTokenType.Number)
        {
            auto node = new ASTNode(NodeType.NumberLiteral, currentToken.value);
            node.programScope = program.peekScope();
            eat(GsTokenType.Number);
            return node;
        }
        else if (currentToken.type == GsTokenType.String)
        {
            auto node = new ASTNode(NodeType.StringLiteral, currentToken.value);
            node.programScope = program.peekScope();
            eat(GsTokenType.String);
            return node;
        }
        else if (currentToken.type == GsTokenType.Boolean)
        {
            auto node = new ASTNode(NodeType.BooleanLiteral, currentToken.value);
            node.programScope = program.peekScope();
            eat(GsTokenType.Boolean);
            return node;
        }
        else if (currentToken.type == GsTokenType.OpeningSquareBracket)
        {
            auto node = new ASTNode(NodeType.ArrayLiteral, "");
            parseArray(node);
            return node;
        }
        else if (currentToken.type == GsTokenType.OpeningCurlyBracket)
        {
            auto node = new ASTNode(NodeType.ObjectLiteral, "");
            parseObject(node);
            return node;
        }
        else if (currentToken.value == "$")
        {
            eat(GsTokenType.Operator); // "$"
            if (currentToken.type == GsTokenType.Number)
            {
                auto node = new ASTNode(NodeType.ArgumentExpression, currentToken.value);
                node.programScope = program.peekScope();
                eat(GsTokenType.Number);
                return node;
            }
            else if (currentToken.value == "$")
            {
                auto node = new ASTNode(NodeType.ArgumentsArrayExpression, "");
                node.programScope = program.peekScope();
                eat(GsTokenType.Operator); // "$"
                return node;
            }
            else
            {
                stop("Unexpected token \"" ~ currentToken.value ~ "\" in argument expression");
                return null;
            }
        }
        else if (currentToken.value == "null")
        {
            eat(GsTokenType.Keyword); // "null"
            auto node = new ASTNode(NodeType.NullLiteral, "");
            return node;
        }
        else if (currentToken.value == "error")
        {
            eat(GsTokenType.Keyword); // "error"
            ASTNode errorParams = new ASTNode(NodeType.ParametersExpression, "");
            errorParams.programScope = program.peekScope();
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                parseList(errorParams);
            }
            auto node = new ASTNode(NodeType.ErrorLiteral, "", [errorParams]);
            node.programScope = program.peekScope();
            return node;
        }
        else if (currentToken.value == "new")
        {
            eat(GsTokenType.Keyword); // "new"
            string name = currentToken.value;
            eat(GsTokenType.Identifier);
            ASTNode node;
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                // Function call
                node = new ASTNode(NodeType.FunctionCallExpression, name);
                node.programScope = program.peekScope();
                parseList(node);
            }
            else
            {
                // Variable access
                node = new ASTNode(NodeType.Identifier, name);
                node.programScope = program.peekScope();
            }
            
            ASTNode newExpr = new ASTNode(NodeType.NewExpression, "", [node]);
            return newExpr;
        }
        else if (currentToken.value == "array")
        {
            eat(GsTokenType.Keyword); // "array"
            ASTNode arrayParams = new ASTNode(NodeType.ParametersExpression, "");
            arrayParams.programScope = program.peekScope();
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                parseList(arrayParams);
            }
            auto arrayExpr = new ASTNode(NodeType.ArrayExpression, "", [arrayParams]);
            arrayExpr.programScope = program.peekScope();
            return arrayExpr;
        }
        else if (currentToken.value == "func")
        {
            eat(GsTokenType.Keyword); // "func"
            string[] funcArguments;
            bool isVariadic = false;
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                funcArguments = parseFunctionArguments();
            }
            else
            {
                isVariadic = true;
            }
            ASTBlock funcBody = new ASTBlock();
            funcBody.programScope = program.pushScope();
            foreach(arg; funcArguments)
                funcBody.programScope.defineArgument(arg);
            parseBlock(funcBody);
            program.popScope();
            auto func = new ASTFunctionLiteral(funcArguments, funcBody);
            func.isVariadic = isVariadic;
            func.programScope = program.peekScope();
            return func;
        }
        else if (currentToken.value == "type")
        {
            eat(GsTokenType.Keyword); // "type"
            ASTNode valueExpr = parseExpression();
            auto typeExpr = new ASTNode(NodeType.TypeExpression, "", [valueExpr]);
            typeExpr.programScope = program.peekScope();
            return typeExpr;
        }
        else if (currentToken.value == "spawn")
        {
            eat(GsTokenType.Keyword); // "spawn"
            ASTNode spawnParams = new ASTNode(NodeType.ParametersExpression, "");
            spawnParams.programScope = program.peekScope();
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                parseList(spawnParams);
            }
            ASTNode functionExpr = parseExpression();
            auto spawnExpr = new ASTNode(NodeType.SpawnExpression, "", [functionExpr, spawnParams]);
            spawnExpr.programScope = program.peekScope();
            return spawnExpr;
        }
        else if (currentToken.value == "await")
        {
            eat(GsTokenType.Keyword); // "await"
            ASTNode threadExpr = parseExpression();
            auto awaitExpr = new ASTNode(NodeType.AwaitExpression, "", [threadExpr]);
            awaitExpr.programScope = program.peekScope();
            return awaitExpr;
        }
        else if (currentToken.value == "sync")
        {
            eat(GsTokenType.Keyword); // "sync"
            ASTNode threadExpr = parseExpression();
            auto syncExpr = new ASTNode(NodeType.SyncExpression, "", [threadExpr]);
            syncExpr.programScope = program.peekScope();
            return syncExpr;
        }
        else if (currentToken.value == "shared")
        {
            eat(GsTokenType.Keyword); // "shared"
            ASTNode sharedExpr = parseExpression();
            sharedExpr.sharedAccess = true;
            sharedExpr.programScope = program.peekScope();
            return sharedExpr;
        }
        else if (currentToken.value == "escape")
        {
            eat(GsTokenType.Keyword); // "escape"
            ASTNode escapeValueExpr = parseExpression();
            auto escapeExpr = new ASTNode(NodeType.EscapeExpression, "", [escapeValueExpr]);
            escapeExpr.programScope = program.peekScope();
            return escapeExpr;
        }
        else if (currentToken.type == GsTokenType.Identifier)
        {
            string name = currentToken.value;
            eat(GsTokenType.Identifier);
            ASTNode node;
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                // Function call
                node = new ASTNode(NodeType.FunctionCallExpression, name);
                node.programScope = program.peekScope();
                parseList(node);
            }
            else
            {
                // Variable access
                node = new ASTNode(NodeType.Identifier, name);
                node.programScope = program.peekScope();
            }
            
            return parseMemberExpression(node);
        }
        else if (currentToken.value == "(")
        {
            eat(GsTokenType.OpeningBracket); // "("
            auto node = parseExpression();
            eat(GsTokenType.ClosingBracket); // ")"
            return node;
        }
        else
        {
            stop("Unexpected token \"" ~ currentToken.value ~ "\" in terminal expression");
            return null;
        }
    }
    
    ASTNode parseMemberExpression(ASTNode leftExpr)
    {
        if (currentToken.type == GsTokenType.OpeningSquareBracket)
        {
            // Array indexing
            eat(GsTokenType.OpeningSquareBracket); // "["
            auto indexExpr = parseExpression();
            eat(GsTokenType.ClosingSquareBracket); // "]"
            ASTNode node;
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                // Call function by index
                node = new ASTNode(NodeType.IndexCallExpression, "", [leftExpr, indexExpr]);
                node.programScope = program.peekScope();
                parseList(node);
            }
            else
            {
                // Access value by index
                node = new ASTNode(NodeType.IndexAccessExpression, "", [leftExpr, indexExpr]);
                node.programScope = program.peekScope();
            }
            return parseMemberExpression(node);
        }
        else if (currentToken.value == ".")
        {
            eat("."); // "."
            string name = currentToken.value;
            eat(GsTokenType.Identifier);
            ASTNode node;
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                // Member function call
                node = new ASTNode(NodeType.MemberCallExpression, name, [leftExpr]);
                node.programScope = program.peekScope();
                parseList(node);
            }
            else
            {
                // Member property access
                node = new ASTNode(NodeType.MemberPropertyAccessExpression, name, [leftExpr]);
                node.programScope = program.peekScope();
            }
            
            return parseMemberExpression(node);
        }
        else
        {
            return leftExpr;
        }
    }

    ASTNode parseStatement()
    {
        if (currentToken.value == "if")
        {
            eat(GsTokenType.Keyword); // "if"
            
            ASTNode conditionExpr = parseExpression();
            
            ASTBlock ifBlock = new ASTBlock();
            ifBlock.programScope = program.pushScope(true);
            parseImplicitBlock(ifBlock);
            program.popScope();
            
            ASTNode[] children;
            
            if (currentToken.value == "else")
            {
                eat(GsTokenType.Keyword); // "else"
                ASTBlock elseBlock = new ASTBlock();
                elseBlock.programScope = program.pushScope(true);
                parseImplicitBlock(elseBlock);
                program.popScope();
                children = [conditionExpr, ifBlock, elseBlock];
            }
            else
            {
                children = [conditionExpr, ifBlock];
            }
            
            ASTNode ifStatement = new ASTNode(NodeType.IfStatement, "", children);
            ifStatement.programScope = program.peekScope();
            return ifStatement;
        }
        else if (currentToken.value == "while")
        {
            eat(GsTokenType.Keyword); // "while"
            
            ASTNode conditionExpr = parseExpression();
            
            ASTBlock loopBlock = new ASTBlock();
            loopBlock.programScope = program.pushScope(true);
            parseImplicitBlock(loopBlock);
            program.popScope();
            
            ASTNode whileStatement = new ASTNode(NodeType.WhileStatement, "", [conditionExpr, loopBlock]);
            whileStatement.programScope = program.peekScope();
            return whileStatement;
        }
        else if (currentToken.value == "do")
        {
            eat(GsTokenType.Keyword); // "do"
            
            ASTBlock loopBlock = new ASTBlock();
            loopBlock.programScope = program.pushScope(true);
            parseImplicitBlock(loopBlock);
            program.popScope();
            
            if (currentToken.value == "while")
            {
                eat(GsTokenType.Keyword); // "while"
                ASTNode conditionExpr = parseExpression();
                eat(GsTokenType.Semicolon); // ";"
                
                ASTNode doWhileStatement = new ASTNode(NodeType.DoWhileStatement, "", [conditionExpr, loopBlock]);
                doWhileStatement.programScope = program.peekScope();
                return doWhileStatement;
            }
            else
            {
                stop("\"while\" expected, not \"" ~ currentToken.value ~ "\"");
                return null;
            }
        }
        else if (currentToken.value == "for")
        {
            eat(GsTokenType.Keyword); // "for"
            eat(GsTokenType.OpeningBracket); // "("
            ASTNode initExpr = parseStatement();
            ASTNode conditionExpr = parseExpression();
            eat(GsTokenType.Semicolon); // ";"
            ASTNode advanceExpr = parseExpression();
            eat(GsTokenType.ClosingBracket); // "("
            
            ASTBlock loopBlock = new ASTBlock();
            loopBlock.programScope = program.pushScope(true);
            parseImplicitBlock(loopBlock);
            program.popScope();
            
            ASTNode forStatement = new ASTNode(NodeType.ForStatement, "", [initExpr, conditionExpr, advanceExpr, loopBlock]);
            forStatement.programScope = program.peekScope();
            return forStatement;
        }
        else if (currentToken.value == "break")
        {
            eat(GsTokenType.Keyword); // "break"
            ASTNode breakStatement = new ASTNode(NodeType.BreakStatement, "");
            breakStatement.programScope = program.peekScope();
            eat(GsTokenType.Semicolon); // ";"
            return breakStatement;
        }
        else if (currentToken.value == "continue")
        {
            eat(GsTokenType.Keyword); // "continue"
            ASTNode contStatement = new ASTNode(NodeType.ContinueStatement, "");
            contStatement.programScope = program.peekScope();
            eat(GsTokenType.Semicolon); // ";"
            return contStatement;
        }
        else if (currentToken.value == "func")
        {
            if (program.isRootScope)
            {
                eat(GsTokenType.Keyword); // "func"
                string name = currentToken.value;
                eat(GsTokenType.Identifier);
                string[] funcArguments;
                bool isVariadic = false;
                if (currentToken.type == GsTokenType.OpeningBracket)
                {
                    funcArguments = parseFunctionArguments();
                }
                else
                {
                    isVariadic = true;
                }
                ASTBlock funcBody = new ASTBlock();
                funcBody.programScope = program.pushScope();
                foreach(arg; funcArguments)
                    funcBody.programScope.defineArgument(arg);
                parseBlock(funcBody);
                program.popScope();
                auto func = new ASTFunction(name, funcArguments, funcBody);
                func.isVariadic = isVariadic;
                func.programScope = program.peekScope();
                return func;
            }
            else
            {
                stop("Nested free functions are not allowed");
                return null;
            }
        }
        else if (currentToken.value == "print")
        {
            eat(GsTokenType.Keyword); // print
            ASTNode expr = parseExpression();
            eat(GsTokenType.Semicolon); // ';'
            auto stat = new ASTNode(NodeType.PrintStatement, "", [expr]);
            stat.programScope = program.peekScope();
            return stat;
        }
        else if (currentToken.value == "let" || currentToken.value == "const") {
            bool isConst = (currentToken.value == "const");
            eat(GsTokenType.Keyword); // "let" or "const"
            string varName = currentToken.value;
            ASTNode expr = parseAssignExpression();
            eat(GsTokenType.Semicolon); // ";"
            if (expr.type == NodeType.Identifier)
            {
                // Implicit initialization
                ASTNode left = expr;
                ASTNode right = new ASTNode(NodeType.NullLiteral, "");
                right.programScope = program.peekScope();
                expr = new ASTNode(NodeType.AssignExpression, "=", [left, right]);
                expr.programScope = program.peekScope();
            }
            NodeType nodeType = NodeType.LetStatement;
            if (isConst)
                nodeType = NodeType.ConstStatement;
            ASTNode letStat = new ASTNode(nodeType, varName, [expr]);
            letStat.programScope = program.peekScope();
            auto stat = new ASTNode(NodeType.ExpressionStatement, "", [letStat]);
            stat.programScope = program.peekScope();
            return stat;
        }
        else if (currentToken.value == "return")
        {
            eat(GsTokenType.Keyword); // "return"
            ASTNode returnExpr;
            if (currentToken.type != GsTokenType.Semicolon)
                returnExpr = parseExpression();
            else
                // return null by default
                returnExpr = new ASTNode(NodeType.NullLiteral, "");
            eat(GsTokenType.Semicolon); // ";"
            auto stat = new ASTNode(NodeType.ReturnStatement, "", [returnExpr]);
            stat.programScope = program.peekScope();
            return stat;
        }
        else if (currentToken.value == "yield")
        {
            eat(GsTokenType.Keyword); // "yield"
            ASTNode returnExpr;
            if (currentToken.type != GsTokenType.Semicolon)
                returnExpr = parseExpression();
            else
                // yield null by default
                returnExpr = new ASTNode(NodeType.NullLiteral, "");
            eat(GsTokenType.Semicolon); // ";"
            auto stat = new ASTNode(NodeType.YieldStatement, "", [returnExpr]);
            stat.programScope = program.peekScope();
            return stat;
        }
        else if (currentToken.value == "shared")
        {
            eat(GsTokenType.Keyword); // "shared"
            ASTNode expr = parseExpression();
            eat(GsTokenType.Semicolon); // ';'
            auto stat = new ASTNode(NodeType.ExpressionStatement, "", [expr]);
            stat.programScope = program.peekScope();
            stat.sharedAccess = true;
            return stat;
        }
        else if (currentToken.value == "import")
        {
            eat(GsTokenType.Keyword); // import
            if (currentToken.type == GsTokenType.Identifier)
            {
                string importName = currentToken.value;
                eat(GsTokenType.Identifier); // import name
                
                if (currentToken.value != "from")
                {
                    stop("\"from\" expected, not \"" ~ currentToken.value ~ "\"");
                    return null;
                }
                eat(GsTokenType.Keyword); // from
                
                string importFilename = currentToken.value;
                eat(GsTokenType.String); // filename
                if (importFilename.length > 2)
                    importFilename = importFilename[1..$-1];
                else
                {
                    stop("Illegal import: " ~ importFilename);
                    return null;
                }
                
                eat(GsTokenType.Semicolon); // ";"
                
                // ConstStatement <importName>
                //   AssignExpression =
                //   MemberPropertyAccessExpression <importName>
                //     Identifier global
                
                if (!program.isModuleImported(importFilename))
                {
                    modul.imports = [importFilename] ~ modul.imports;
                    
                    ASTNode globalExpr = new ASTNode(NodeType.Identifier, "global");
                    globalExpr.programScope = program.peekScope();
                    
                    ASTNode importIdentifier = new ASTNode(NodeType.Identifier, importName);
                    importIdentifier.programScope = program.peekScope();
                    
                    ASTNode importPropAccessExpr = new ASTNode(NodeType.MemberPropertyAccessExpression, importName, [globalExpr]);
                    importPropAccessExpr.programScope = program.peekScope();
                    
                    ASTNode importAssignmentExpr = new ASTNode(NodeType.AssignExpression, "=", [importIdentifier, importPropAccessExpr]);
                    importAssignmentExpr.programScope = program.peekScope();
                    
                    ASTNode importStat = new ASTNode(NodeType.ConstStatement, importName, [importAssignmentExpr]);
                    importStat.programScope = program.peekScope();
                    
                    return importStat;
                }
                else
                    return null;
            }
            else
            {
                stop("Nested free functions are not allowed");
                return null;
            }
        }
        else if (currentToken.value == "macro")
        {
            if (program.isRootScope)
            {
                eat(GsTokenType.Keyword); // macro
                string macroName = currentToken.value;
                eat(GsTokenType.Identifier); // macroName
                eat("=");
                ASTNode macroExpr = parseExpression();
                eat(GsTokenType.Semicolon); // ';'
                auto stat = new ASTNode(NodeType.MacroDefineStatement, macroName, [macroExpr]);
                stat.programScope = program.peekScope();
                return stat;
            }
            else
            {
                stop("Macros are only allowed in the global scope");
                return null;
            }
        }
        else
        {
            ASTNode expr = parseExpression();
            eat(GsTokenType.Semicolon); // ';'
            auto stat = new ASTNode(NodeType.ExpressionStatement, "", [expr]);
            stat.programScope = program.peekScope();
            return stat;
        }
    }
    
    string[] parseFunctionArguments()
    {
        string[] args;
        
        eat(GsTokenType.OpeningBracket);
        
        bool reading = true;
        do
        {
            if (currentToken.type == GsTokenType.ClosingBracket)
                break;
            
            string argName = currentToken.value;
            eat(GsTokenType.Identifier);
            
            args ~= argName;
            
            if (currentToken.type == GsTokenType.ClosingBracket)
                break;
            else
                eat(",");
        }
        while(running && reading);
        
        eat(GsTokenType.ClosingBracket);
        
        return args;
    }

    bool parseModule(GsProgram program, GsModule modul)
    {
        this.program = program;
        this.modul = modul;
        
        while(running && currentToken.type != GsTokenType.EOF)
        {
            auto statement = parseStatement();
            if (statement)
            {
                statement.programScope = program.peekScope();
                modul.addStatement(statement);
            }
        }
        
        return running;
    }

    void parseBlock(ASTBlock block)
    {
        eat(GsTokenType.OpeningCurlyBracket); // {
        while(running)
        {
            if (currentToken.type == GsTokenType.ClosingCurlyBracket)
                break;
            auto statement = parseStatement();
            if (statement)
            {
                statement.programScope = program.peekScope();
                block.children ~= statement;
            }
        }
        eat(GsTokenType.ClosingCurlyBracket); // }
    }
    
    void parseImplicitBlock(ASTBlock block)
    {
        if (currentToken.type == GsTokenType.OpeningCurlyBracket)
            parseBlock(block);
        else
        {
            auto statement = parseStatement();
            if (statement)
            {
                statement.programScope = program.peekScope();
                block.children ~= statement;
            }
        }
    }
    
    void parseList(ASTNode parentNode)
    {
        eat(GsTokenType.OpeningBracket); // (
        while(running)
        {
            if (currentToken.type == GsTokenType.ClosingBracket)
                break;
            auto parameterExpr = parseExpression();
            parentNode.children ~= parameterExpr;
            if (currentToken.value == ",")
                eat(",");
        }
        eat(GsTokenType.ClosingBracket); // )
    }
    
    void parseArray(ASTNode parentNode)
    {
        eat(GsTokenType.OpeningSquareBracket); // [
        while(running)
        {
            if (currentToken.type == GsTokenType.ClosingSquareBracket)
                break;
            auto parameterExpr = parseExpression();
            parentNode.children ~= parameterExpr;
            if (currentToken.value == ",")
                eat(",");
        }
        eat(GsTokenType.ClosingSquareBracket); // ]
    }
    
    void parseObject(ASTNode parentNode)
    {
        eat(GsTokenType.OpeningCurlyBracket); // {
        while(running)
        {
            if (currentToken.type == GsTokenType.ClosingCurlyBracket)
                break;
            auto keyValueExpr = parseKeyValueExpression();
            parentNode.children ~= keyValueExpr;
            if (currentToken.value == ",")
                eat(",");
            else if (currentToken.type != GsTokenType.ClosingCurlyBracket)
            {
                stop("Unexpected token \"" ~ currentToken.value ~ "\" in object literal");
                return;
            }
        }
        eat(GsTokenType.ClosingCurlyBracket); // }
    }
    
    ASTNode parseKeyValueExpression()
    {
        if (currentToken.type == GsTokenType.Identifier)
        {
            string name = currentToken.value;
            eat(GsTokenType.Identifier);
            ASTNode node = new ASTNode(NodeType.KeyValueExpression, name);
            if (currentToken.value == ":")
                eat(":"); // :
            else
            {
                stop("Unexpected token \"" ~ currentToken.value ~ "\" in key-value expression");
                return null;
            }
            ASTNode valueExpr = parseExpression();
            node.children ~= valueExpr;
            return node;
        }
        else
        {
            stop("Unexpected token \"" ~ currentToken.value ~ "\" in key-value expression");
            return null;
        }
    }
}
