/*
Copyright (c) 2025 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module gscript.parser;

import std.stdio;
import std.array;
import std.algorithm;
import std.conv;
import gscript.lexer;

enum NodeType
{
    NumberLiteral,
    StringLiteral,
    BooleanLiteral,
    Function,
    Identifier,
    UnaryExpression,
    BinaryExpression,
    AssignExpression,
    LetStatement,
    ConstStatement,
    ExpressionStatement,
    ReturnStatement,
    PrintStatement,
    Block,
    FunctionCallExpression,
    IndexAccessExpression,
    IndexCallExpression,
    MemberPropertyAccessExpression,
    MemberCallExpression
}

immutable string[] assignOperators = [
    "=", "+=", "-=", "*=", "/=",
    "&=", "|=", "^=", "~="
];

immutable string[] logicalOperators = [
    "&&", "||", "and", "or"
];

immutable string[] bitwiseOperators = [
    "&", "|", "^", "xor"
];

immutable string[] compareOperators = [
    ">", "<", "==", ">=", "<=", "!="
];

immutable string[] mulDivModOperators = [
    "*", "/", "%", "mod", "^^"
];

bool isAssignment(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           assignOperators.canFind(token.value);
}

bool isLogical(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           logicalOperators.canFind(token.value);
}

bool isBitwise(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           bitwiseOperators.canFind(token.value);
}

string toLogical(string op)
{
    if (op == "and") return "&&";
    if (op == "or") return "||";
    if (op == "not") return "!";
    else return op;
}

string toBitwise(string op)
{
    if (op == "xor") return "^";
    else return op;
}

bool isCompare(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           compareOperators.canFind(token.value);
}

bool isAddSub(GsToken token)
{
    return token.type == GsTokenType.Operator && 
          (token.value == "+" || token.value == "-");
}

bool isMulDivMod(GsToken token)
{
    return token.type == GsTokenType.Operator && 
           mulDivModOperators.canFind(token.value);
}

struct GsVariable
{
    int index;
    bool isConst;
    bool isInitialized;
}

class Scope
{
    Scope parent;
    Scope[] children;
    int nextLocalIndex = 0;
    GsVariable[string] variables;
    int nextArgumentIndex = 0;
    GsVariable[string] arguments;
    
    this(Scope parentScope = null)
    {
        parent = parentScope;
        if (parent)
        {
            parent.addChildScope(this);
        }
    }
    
    void addChildScope(Scope s)
    {
        children ~= s;
    }
    
    int defineArgument(string name)
    {
        if (!(name in arguments) && !(name in variables))
        {
            int index = nextArgumentIndex;
            arguments[name] = GsVariable(index, false, false);
            nextArgumentIndex++;
            return index;
        }
        else
        {
            throw new Exception("Redefinition of argument \"" ~ name ~ "\"");
        }
    }
    
    int defineVariable(string name, bool isConst = false)
    {
        if (!(name in variables) && !(name in arguments))
        {
            int index = nextLocalIndex;
            variables[name] = GsVariable(index, isConst, false);
            nextLocalIndex++;
            return index;
        }
        else
        {
            throw new Exception("Redefinition of variable \"" ~ name ~ "\"");
        }
    }
    
    bool isArgumentVisible(string name)
    {
        if (name in arguments)
            return true;
        else if (parent)
            return parent.isArgumentVisible(name);
        else
            return false;
    }
    
    bool isVariableVisible(string name)
    {
        if (name in variables)
            return true;
        else if (parent)
            return parent.isVariableVisible(name);
        else
            return false;
    }
    
    GsVariable* getVariable(string name)
    {
        GsVariable* v = name in variables;
        if (v)
            return v;
        else if (parent)
            return parent.getVariable(name);
        else
            return null;
    }
    
    int argumentIndex(string name)
    {
        if (name in arguments)
            return arguments[name].index;
        else if (parent)
            return parent.argumentIndex(name);
        else
            return -1;
    }
    
    int variableIndex(string name)
    {
        if (name in variables)
            return variables[name].index;
        else if (parent)
            return parent.variableIndex(name);
        else
            return -1;
    }
}

class ASTNode
{
    NodeType type;
    string value;
    ASTNode[] children;
    Scope programScope;
    bool isConst = false;

    this(NodeType type, string value, ASTNode[] children = [])
    {
        this.type = type;
        this.value = value;
        this.children = children;
    }
    
    bool isLiteral()
    {
        return
            type == NodeType.NumberLiteral || 
            type == NodeType.StringLiteral ||
            type == NodeType.BooleanLiteral;
    }
    
    void print(string indent = "")
    {
        writeln(indent, type, " ", value);
        foreach(ASTNode child; children)
        {
            child.print(indent ~ "  ");
        }
    }
}

class ASTBlock: ASTNode
{
    this()
    {
        super(NodeType.Block, "");
    }
}

class ASTFunction: ASTNode
{
    string name;
    string[] arguments;
    ASTBlock bodyBlock;
    
    this(string name, string[] arguments, ASTBlock bodyBlock)
    {
        super(NodeType.Function, "");
        this.name = name;
        this.arguments = arguments;
        this.bodyBlock = bodyBlock;
    }
    
    override void print(string indent = "")
    {
        writeln(indent, type, " ", name);
        foreach(ASTNode child; bodyBlock.children)
        {
            child.print(indent ~ "  ");
        }
    }
}

class GsProgram
{
  protected:
    Scope _rootScope;
    Scope[] scopeStack;
    size_t scopeStackPointer = 0;
    ASTNode[] statements;
    
  public:
    this()
    {
        scopeStack = new Scope[1024];
        _rootScope = pushScope();
    }
    
    Scope pushScope(bool inherit = false)
    {
        Scope parent = null;
        if (inherit && scopeStackPointer > 0)
            parent = peekScope();
        scopeStack[scopeStackPointer] = new Scope(parent);
        Scope result = scopeStack[scopeStackPointer];
        scopeStackPointer++;
        return result;
    }
    
    void popScope()
    {
        if (scopeStackPointer > 0)
            scopeStackPointer--;
    }
    
    Scope peekScope()
    {
        return scopeStack[scopeStackPointer - 1];
    }
    
    void addStatement(ASTNode stat)
    {
        statements ~= stat;
        stat.programScope = peekScope();
    }
    
    ASTNode[] ast()
    {
        return statements;
    }
    
    Scope rootScope()
    {
        return _rootScope;
    }
}

class GsParser
{
  protected:
    GsLexer lexer;
    string filename;
    GsToken currentToken;
    GsProgram program;
    bool running = false;

   public:
    this(GsLexer lexer, string filename)
    {
        this.lexer = lexer;
        this.filename = filename;
        this.currentToken = lexer.nextToken();
        running = true;
    }
    
    void stop(string msg)
    {
        running = false;
        writeln(filename, "(", lexer.line.to!string, "): ", msg);
    }

    void eat(GsTokenType expectedType)
    {
        if (currentToken.type == expectedType)
            currentToken = lexer.nextToken();
        else
        {
            if (currentToken.type == GsTokenType.EOF)
                stop("Unexpected end of file, " ~ tokenTypeToString(expectedType) ~ " expected");
            else
                stop("Unexpected token \"" ~ currentToken.value ~ "\", " ~ tokenTypeToString(expectedType) ~ " expected");
        }
    }
    
   /*
    * Base entry for expression parsing
    */
    ASTNode parseExpression()
    {
        ASTNode left = parseAssignExpression();

        if (currentToken.value == "~")
        {
            string op = currentToken.value;
            eat(GsTokenType.Operator);
            ASTNode right = parseExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }
    
   /*
    * a = b, etc.
    */
    ASTNode parseAssignExpression()
    {
        ASTNode left = parseLogicalExpression();

        while (isAssignment(currentToken))
        {
            string op = currentToken.value;
            eat(GsTokenType.Operator);
            ASTNode right = parseAssignExpression();
            
            if (op == "=")
            {
                left = new ASTNode(NodeType.AssignExpression, "=", [left, right]);
                left.programScope = program.peekScope();
            }
            else
            {
                // Expand shorthand assignment
                string simpleOp = op[0 .. $ - 1]; // remove '='
                right = new ASTNode(NodeType.BinaryExpression, simpleOp, [left, right]);
                right.programScope = program.peekScope();
                left = new ASTNode(NodeType.AssignExpression, "=", [left, right]);
                left.programScope = program.peekScope();
            }
        }

        return left;
    }
    
   /*
    * a && b, a || b
    */
    ASTNode parseLogicalExpression()
    {
        ASTNode left = parseBitwiseExpression();
        
        while(isLogical(currentToken))
        {
            string op = toLogical(currentToken.value);
            eat(GsTokenType.Operator);
            ASTNode right = parseLogicalExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }
    
   /*
    * a & b, a | b, a ^ b
    */
    ASTNode parseBitwiseExpression()
    {
        ASTNode left = parseCompareExpression();
        
        while(isBitwise(currentToken))
        {
            string op = toBitwise(currentToken.value);
            eat(GsTokenType.Operator);
            ASTNode right = parseBitwiseExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }
    
   /*
    * a > 0, etc.
    */
    ASTNode parseCompareExpression()
    {
        ASTNode left = parseAddSubExpression();
        
        while(isCompare(currentToken))
        {
            string op = currentToken.value;
            eat(GsTokenType.Operator);
            ASTNode right = parseCompareExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }
    
   /*
    * a + b, a - b
    */
    ASTNode parseAddSubExpression()
    {
        ASTNode left = parseMulDivModExpression();
        
        while(isAddSub(currentToken))
        {
            string op = currentToken.value;
            eat(GsTokenType.Operator);
            ASTNode right = parseAddSubExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }

   /*
    * a * b, a / b, a % b, a ^^ b
    */
    ASTNode parseMulDivModExpression()
    {
        ASTNode left = parseUnaryOpExpression();
        
        while(isMulDivMod(currentToken))
        {
            string op = currentToken.value;
            if (op == "mod")
                op = "%";
            eat(GsTokenType.Operator);
            ASTNode right = parseMulDivModExpression();
            left = new ASTNode(NodeType.BinaryExpression, op, [left, right]);
            left.programScope = program.peekScope();
        }

        return left;
    }
    
   /*
    * -a, +a, !a, not a
    */
    ASTNode parseUnaryOpExpression()
    {
        ASTNode left;

        if (currentToken.value == "-")
        {
            eat(GsTokenType.Operator);
            left = new ASTNode(NodeType.UnaryExpression, "-", [parseUnaryOpExpression()]);
            left.programScope = program.peekScope();
        }
        else if (currentToken.value == "+")
        {
            eat(GsTokenType.Operator);
            left = new ASTNode(NodeType.UnaryExpression, "+", [parseUnaryOpExpression()]);
            left.programScope = program.peekScope();
        }
        else if (currentToken.value == "!" || currentToken.value == "not")
        {
            eat(GsTokenType.Operator);
            left = new ASTNode(NodeType.UnaryExpression, "!", [parseUnaryOpExpression()]);
            left.programScope = program.peekScope();
        }
        else
        {
            left = parseTerminalExpression();
        }

        return left;
    }
    
    ASTNode parseTerminalExpression()
    {
        if (currentToken.type == GsTokenType.Number)
        {
            auto node = new ASTNode(NodeType.NumberLiteral, currentToken.value);
            node.programScope = program.peekScope();
            eat(GsTokenType.Number);
            return node;
        }
        else if (currentToken.type == GsTokenType.String)
        {
            auto node = new ASTNode(NodeType.StringLiteral, currentToken.value);
            node.programScope = program.peekScope();
            eat(GsTokenType.String);
            return node;
        }
        else if (currentToken.type == GsTokenType.Boolean)
        {
            auto node = new ASTNode(NodeType.BooleanLiteral, currentToken.value);
            node.programScope = program.peekScope();
            eat(GsTokenType.Boolean);
            return node;
        }
        else if (currentToken.type == GsTokenType.Identifier)
        {
            string name = currentToken.value;
            eat(GsTokenType.Identifier);
            ASTNode node;
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                // Function call
                node = new ASTNode(NodeType.FunctionCallExpression, name);
                node.programScope = program.peekScope();
                parseList(node);
            }
            else
            {
                // Variable access
                node = new ASTNode(NodeType.Identifier, name);
                node.programScope = program.peekScope();
            }
            
            return parseMemberExpression(node);
        }
        else if (currentToken.value == "(")
        {
            eat(GsTokenType.OpeningBracket); // "("
            auto node = parseExpression();
            eat(GsTokenType.ClosingBracket); // ")"
            return node;
        }
        else
        {
            stop("Unexpected token \"" ~ currentToken.value ~ "\" in terminal expression");
            return null;
        }
    }
    
    ASTNode parseMemberExpression(ASTNode leftExpr)
    {
        if (currentToken.type == GsTokenType.OpeningSquareBracket)
        {
            // Array indexing
            eat(GsTokenType.OpeningSquareBracket); // "["
            auto indexExpr = parseExpression();
            eat(GsTokenType.ClosingSquareBracket); // "]"
            ASTNode node;
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                // Call function by index
                node = new ASTNode(NodeType.IndexCallExpression, "", [leftExpr, indexExpr]);
                node.programScope = program.peekScope();
                parseList(node);
            }
            else
            {
                // Access value by index
                node = new ASTNode(NodeType.IndexAccessExpression, "", [leftExpr, indexExpr]);
                node.programScope = program.peekScope();
            }
            return parseMemberExpression(node);
        }
        else if (currentToken.value == ".")
        {
            eat(GsTokenType.Separator); // "."
            string name = currentToken.value;
            eat(GsTokenType.Identifier);
            ASTNode node;
            if (currentToken.type == GsTokenType.OpeningBracket)
            {
                // Member function call
                node = new ASTNode(NodeType.MemberCallExpression, name, [leftExpr]);
                node.programScope = program.peekScope();
                parseList(node);
            }
            else
            {
                // Member property access
                node = new ASTNode(NodeType.MemberPropertyAccessExpression, name, [leftExpr]);
                node.programScope = program.peekScope();
            }
            
            return parseMemberExpression(node);
        }
        else
        {
            return leftExpr;
        }
    }

    ASTNode parseStatement()
    {
        if (currentToken.value == "func")
        {
            eat(GsTokenType.Keyword); // "func"
            string name = currentToken.value;
            eat(GsTokenType.Identifier);
            string[] funcArguments = parseFunctionArguments();
            ASTBlock funcBody = new ASTBlock();
            funcBody.programScope = program.pushScope();
            foreach(arg; funcArguments)
                funcBody.programScope.defineArgument(arg);
            parseBlock(funcBody);
            program.popScope();
            auto func = new ASTFunction(name, funcArguments, funcBody);
            func.programScope = program.peekScope();
            return func;
        }
        else if (currentToken.value == "print")
        {
            eat(GsTokenType.Identifier);
            ASTNode expr = parseExpression();
            eat(GsTokenType.Semicolon); // ';'
            auto stat = new ASTNode(NodeType.PrintStatement, "", [expr]);
            stat.programScope = program.peekScope();
            return stat;
        }
        else if (currentToken.value == "let" || currentToken.value == "const") {
            bool isConst = (currentToken.value == "const");
            eat(GsTokenType.Keyword); // "let" or "const"
            string varName = currentToken.value;
            ASTNode expr = parseAssignExpression();
            eat(GsTokenType.Semicolon); // ";"
            if (expr.type == NodeType.Identifier)
            {
                // Implicit initialization
                ASTNode left = expr;
                ASTNode right = new ASTNode(NodeType.NumberLiteral, "0");
                right.programScope = program.peekScope();
                expr = new ASTNode(NodeType.AssignExpression, "=", [left, right]);
                expr.programScope = program.peekScope();
            }
            NodeType nodeType = NodeType.LetStatement;
            if (isConst)
                nodeType = NodeType.ConstStatement;
            ASTNode stat = new ASTNode(nodeType, varName, [expr]);
            stat.programScope = program.peekScope();
            return stat;
        }
        else if (currentToken.value == "return")
        {
            eat(GsTokenType.Keyword); // "return"
            ASTNode returnExpr = parseExpression();
            eat(GsTokenType.Semicolon); // ";"
            auto stat = new ASTNode(NodeType.ReturnStatement, "", [returnExpr]);
            stat.programScope = program.peekScope();
            return stat;
        }
        else
        {
            ASTNode expr = parseExpression();
            eat(GsTokenType.Semicolon); // ';'
            auto stat = new ASTNode(NodeType.ExpressionStatement, "", [expr]);
            stat.programScope = program.peekScope();
            return stat;
        }
    }
    
    string[] parseFunctionArguments()
    {
        string[] args;
        
        eat(GsTokenType.OpeningBracket);
        
        bool reading = true;
        do
        {
            if (currentToken.type == GsTokenType.ClosingBracket)
                break;
            
            string argName = currentToken.value;
            eat(GsTokenType.Identifier);
            
            args ~= argName;
            
            if (currentToken.type == GsTokenType.ClosingBracket)
                break;
            else
                eat(GsTokenType.Separator);
        }
        while(running && reading);
        
        eat(GsTokenType.ClosingBracket);
        
        return args;
    }

    bool parseProgram(GsProgram program)
    {
        this.program = program;
        
        while(running && currentToken.type != GsTokenType.EOF)
        {
            auto statement = parseStatement();
            statement.programScope = program.peekScope();
            program.addStatement(statement);
        }
        
        return running;
    }

    void parseBlock(ASTBlock parentBlock)
    {
        eat(GsTokenType.OpeningCurlyBracket); // {
        while(running)
        {
            if (currentToken.type == GsTokenType.ClosingCurlyBracket)
                break;
            auto statement = parseStatement();
            statement.programScope = program.peekScope();
            parentBlock.children ~= statement;
        }
        eat(GsTokenType.ClosingCurlyBracket); // }
    }
    
    void parseList(ASTNode parentNode)
    {
        eat(GsTokenType.OpeningBracket); // (
        while(running)
        {
            if (currentToken.type == GsTokenType.ClosingBracket)
                break;
            auto parameterExpr = parseExpression();
            parentNode.children ~= parameterExpr;
            if (currentToken.value == ",")
                eat(GsTokenType.Separator);
        }
        eat(GsTokenType.ClosingBracket); // )
    }
}
