/*
Copyright (c) 2025 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module main;

import std.stdio;
import std.conv;
import std.file;
import std.path;
import std.datetime: SysTime;
import std.getopt;
import std.bitmanip;
import std.format;
import std.json;
import std.process;

import dlib.core.memory;

import gscript;

struct ProjectConfig
{
    string mainScript = "main.gs";
version(Windows)
    string target = "app.exe";
else
    string target = "app";
    string ver = "0.0.0.0";
    string icon;
}

ProjectConfig loadConfig(string exeDirectory, string filename)
{
    if (!exists(filename))
    {
        writeln("No config file found, using defaults.");
        return ProjectConfig.init;
    }

    string jsonText = cast(string)read(filename);
    JSONValue data = parseJSON(jsonText);

    ProjectConfig cfg;
    cfg.icon = buildPath(exeDirectory, "data", "appicon.ico");
    
    if ("main" in data)
        cfg.mainScript = data["main"].str;
    else
        writeln("Missing \"main\" in project.json");
    
    if ("target" in data)
        cfg.target = data["target"].str;
    
    if ("version" in data)
        cfg.ver = data["version"].str;
    
    if ("icon" in data)
        cfg.icon = data["icon"].str;
    
    return cfg;
}

void packStandalone(string interpreterPath, ubyte[] code, string outputPath)
{
    try
    {
        ubyte[] interpreter = cast(ubyte[])std.file.read(interpreterPath);
        
        string magic = cast(string)code[0 .. 4];
        if (magic != GSIR_MAGIC)
            throw new Exception("Not a GSIR file");
        
        ubyte[4] codeSize;
        codeSize[] = nativeToLittleEndian(cast(uint)code.length)[0..4];
        
        ubyte[] packedData = interpreter ~ code ~ cast(ubyte[])"MAIN" ~ codeSize;
        std.file.write(outputPath, packedData);
        
        writeln("Successfully built to ", outputPath);
    }
    catch (Exception e)
    {
        writeln("Error: ", e.msg);
    }
}

void buildProject(string exeDirectory, string inputFilename)
{
    if (inputFilename.length == 0)
        inputFilename = "gsproject.json";
    
    if (!exists(inputFilename))
    {
        writeln(inputFilename, " not found");
        return;
    }
    
    // Load config
    ProjectConfig config = loadConfig(exeDirectory, inputFilename);
    
    if (!exists(config.mainScript))
    {
        writeln(config.mainScript, " not found");
        return;
    }
    
    // TODO: other options
    
    ubyte[] code;
    if (extension(config.mainScript) == ".gs")
    {
        // Load and compile source code
        string script = readText(config.mainScript);
        GsInstruction[] instructions = compile(script, config.mainScript);
        code = saveBytecode(instructions);
    }
    else if (extension(config.mainScript) == ".gsc")
    {
        // Load prebuilt byte code
        code = cast(ubyte[])std.file.read(config.mainScript);
    }
    
    if (code.length == 0)
        return;
    
    string interpteterFilename = buildPath(exeDirectory, "gsrunner");
    version(Windows) interpteterFilename ~= ".exe";
    if (!exists(interpteterFilename))
    {
        writeln(interpteterFilename, " not found");
        return;
    }
    
    copy(interpteterFilename, config.target);
    
    version(Windows)
    {
        string rceditFilename = buildPath(exeDirectory, "rcedit.exe");
        
        if (exists(rceditFilename))
        {
            auto rcedit = execute([
                rceditFilename,
                config.target,
                "--set-file-version", config.ver,
                "--set-product-version", config.ver,
                "--set-icon", config.icon
            ]);
            
            if (rcedit.status != 0)
                writeln("rcedit failed:\n", rcedit.output);
        }
    }
    
    packStandalone(config.target, code, config.target);
}

void main(string[] args)
{
    string exePath = thisExePath();
    string exeDirectory = dirName(exePath);
    string bytecodePath;
    
    string defaultInputFilename = buildPath(exeDirectory, "main.gsc");
    
    GsInstruction[] instructions;
    bool showHelp = false;
    bool saveCode = false;
    bool compileOnly = false;
    bool build = false;
    string inputFilename;
    string outputFilename;
    ubyte[] code;
    
    auto helpInformation = getopt(
        args,
        "help|h", "Show help", &showHelp,
        "compile|c", "Compile script to bytecode without running", &compileOnly,
        "build|b", "Build standalone executable", &build,
        "output|o", "Output file", &outputFilename,
        "input|i", "Input file (.gs, .gsc, .json)", &inputFilename
    );
    
    if (args.length == 1)
        build = true;
    
    if (showHelp)
    {
        defaultGetoptPrinter(format("Usage: %s [options]", baseName(exePath)), helpInformation.options);
        return;
    }
    else if (build)
    {
        buildProject(exeDirectory, inputFilename);
        return;
    }
    
    if (inputFilename.length == 0)
        inputFilename = defaultInputFilename;
    
    if (!exists(inputFilename))
    {
        writeln(inputFilename, " not found");
        return;
    }
    
    if (code.length)
    {
        instructions = loadBytecode(code);
        saveCode = false;
    }
    else
    {
        string inputExtension = extension(inputFilename);
        string inputDirectory = dirName(inputFilename);
        string bytecodeFilename = baseName(inputFilename, inputExtension) ~ ".gsc";
        bytecodePath = buildPath(inputDirectory, bytecodeFilename);
        if (inputExtension == ".gsc")
        {
            code = cast(ubyte[])std.file.read(inputFilename);
            instructions = loadBytecode(code);
            saveCode = false;
        }
        else
        {
            bool needToCompile = true;
            if (exists(bytecodePath))
            {
                if (timeLastModified(inputFilename, SysTime.min) < timeLastModified(bytecodePath, SysTime.min))
                {
                    code = cast(ubyte[])std.file.read(bytecodePath);
                    instructions = loadBytecode(code);
                    needToCompile = false;
                }
            }
            
            if (needToCompile)
            {
                string script = readText(inputFilename);
                instructions = compile(script, inputFilename);
                saveCode = true;
            }
        }
    }
    
    if (instructions.length == 0)
    {
        writeln("No bytecode to run");
        return;
    }
    
    debug writeln(instructions);
    
    if (!compileOnly)
    {
        auto vm = New!GsVirtualMachine();
        vm.load(instructions);
        vm.run();
        Delete(vm);
    }
    
    if (saveCode)
    {
        code = saveBytecode(instructions);
        if (outputFilename.length)
            bytecodePath = outputFilename;
        std.file.write(bytecodePath, code);
    }
    
    debug writeln("allocatedMemory: ", allocatedMemory);
}
